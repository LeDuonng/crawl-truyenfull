import requests
from bs4 import BeautifulSoup
from docx import Document
import re
import os
import concurrent.futures
import time
from pathlib import Path

def get_chapter_content(url, max_retries=3):
    for attempt in range(max_retries):
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
            response = requests.get(url, headers=headers, verify=False, timeout=30)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                chapter_div = soup.find('div', class_='chapter-c')
                
                if chapter_div:
                    for ad_div in chapter_div.find_all('div', class_=lambda x: x and 'ads' in x):
                        ad_div.extract()
                    
                    hr_end = chapter_div.find('hr', class_='chapter-end')
                    if hr_end:
                        content_elements = []
                        for sibling in hr_end.previous_siblings:
                            if sibling.name == 'div' and any('ads' in c for c in sibling.get('class', [])):
                                continue
                            content_elements.append(sibling)
                        content_elements.reverse()
                        
                        temp_html = ''.join(str(elem) for elem in content_elements)
                        temp_soup = BeautifulSoup(temp_html, 'html.parser')
                        text = temp_soup.get_text(separator='\n').strip()
                    else:
                        text = chapter_div.get_text(separator='\n').strip()
                    
                    # Ki·ªÉm tra n·∫øu text r·ªóng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng
                    if not text or text.isspace():
                        print(f"Ch∆∞∆°ng tr·ªëng: {url}")
                        return "Ch∆∞∆°ng tr·ªëng"
                        
                    return text
                else:
                    print(f"Kh√¥ng t√¨m th·∫•y div chapter-c: {url}")
                    return "Kh√¥ng t√¨m th·∫•y n·ªôi dung"
            elif response.status_code == 503:
                if attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5
                    print(f"L·ªói 503, th·ª≠ l·∫°i sau {wait_time} gi√¢y...")
                    time.sleep(wait_time)
                    continue
                else:
                    print(f"Kh√¥ng th·ªÉ truy c·∫≠p {url} sau {max_retries} l·∫ßn th·ª≠")
                    return "L·ªói 503"
            else:
                print(f"Kh√¥ng th·ªÉ truy c·∫≠p {url}, m√£ l·ªói: {response.status_code}")
                return f"L·ªói {response.status_code}"
        except Exception as e:
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 5
                print(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ {url}: {e}, th·ª≠ l·∫°i sau {wait_time} gi√¢y...")
                time.sleep(wait_time)
                continue
            else:
                print(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ {url}: {e}")
                return f"L·ªói: {str(e)}"
    return "L·ªói kh√¥ng x√°c ƒë·ªãnh"

def detect_ads(text):
    """Nh·∫≠n bi·∫øt qu·∫£ng c√°o d·ª±a tr√™n c√°c ƒë·∫∑c ƒëi·ªÉm"""
    # Danh s√°ch t·ª´ kh√≥a qu·∫£ng c√°o
    ad_keywords = [
        'theo d√µi', 'subscribe', 'follow', 'like', 'b√¨nh lu·∫≠n', 'comment',
        'review', 'ƒë√°nh gi√°', 'k√™nh', 'channel', 'team', 'nh√≥m', 'group',
        'facebook', 'fb', 'fanpage', 'website', 'web', 'link'
    ]
    
    # Danh s√°ch emoji ph·ªï bi·∫øn trong qu·∫£ng c√°o
    ad_emojis = ['üìç', 'üå∫', '‚ù§Ô∏è', 'üíñ', 'üíù', 'üíï', 'üíó', 'üíì', 'üíû', 'üíü', 'üíú', 'üíô', 'üíö', 'üíõ', 'üß°', 'ü§ç', 'ü§é', 'üñ§', 'üíØ', '‚≠ê', 'üåü', '‚ú®']
    
    # Ki·ªÉm tra c√≥ emoji ·ªü ƒë·∫ßu v√† cu·ªëi kh√¥ng
    has_emoji_ends = any(text.startswith(emoji) and text.endswith(emoji) for emoji in ad_emojis)
    
    # Ki·ªÉm tra c√≥ t·ª´ kh√≥a qu·∫£ng c√°o kh√¥ng
    has_ad_keywords = any(keyword in text.lower() for keyword in ad_keywords)
    
    # Ki·ªÉm tra c√≥ link kh√¥ng
    has_links = bool(re.search(r'https?://\S+|www\.\S+', text))
    
    # Ki·ªÉm tra c√≥ y√™u c·∫ßu t∆∞∆°ng t√°c kh√¥ng
    has_interaction_requests = bool(re.search(r'(like|theo d√µi|subscribe|b√¨nh lu·∫≠n|comment|review|ƒë√°nh gi√°)', text.lower()))
    
    # N·∫øu c√≥ √≠t nh·∫•t 2 trong 4 ƒë·∫∑c ƒëi·ªÉm tr√™n, coi l√† qu·∫£ng c√°o
    return sum([has_emoji_ends, has_ad_keywords, has_links, has_interaction_requests]) >= 2

def clean_text(text):
    # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng th·ª´a v√† chu·∫©n h√≥a kho·∫£ng tr·∫Øng
    text = re.sub(r'\n{2,}', '\n\n', text)  # Gi·ªØ t·ªëi ƒëa 2 d√≤ng tr·ªëng gi·ªØa c√°c ƒëo·∫°n
    text = re.sub(r'\s+', ' ', text)       # Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
    
    # T√°ch text th√†nh c√°c ƒëo·∫°n
    paragraphs = text.split('\n\n')
    
    # L·ªçc b·ªè c√°c ƒëo·∫°n qu·∫£ng c√°o
    cleaned_paragraphs = []
    for para in paragraphs:
        if not detect_ads(para.strip()):
            cleaned_paragraphs.append(para)
    
    # Gh√©p l·∫°i c√°c ƒëo·∫°n
    text = '\n\n'.join(cleaned_paragraphs)
    
    # Lo·∫°i b·ªè c√°c pattern qu·∫£ng c√°o c·ª• th·ªÉ ƒë√£ bi·∫øt
    text = re.sub(r'\[Truy·ªán ƒë∆∞·ª£c ƒëƒÉng t·∫£i duy nh·∫•t t·∫°i monkeydtruyen\.com - https://monkeydtruyen\.com/.*?\]', '', text)
    text = re.sub(r'üìç N·∫øu th·∫•y hay ƒë·ª´ng ng·∫°i cho b·ªçn m√¨nh m·ªôt l∆∞·ª£t theo d√µi nh√©! üìç.*?C√° Ch√©p Ng·∫Øm M∆∞a ‚Ä¢ ÈØâÈ≠öÊúõÈõ®.*?h·∫•p d·∫´n!', '', text, flags=re.DOTALL)
    text = re.sub(r'üå∫ Hi, Ch√†o m·ª´ng b·∫°n gh√© k√™nh c·ªßa team Nh√¢n Tr√≠.*?C·∫£m ∆°n b·∫°n üå∫', '', text, flags=re.DOTALL)
    
    return text.strip()

def fetch_chapter(chapter_number, base_url):
    # Th·ª≠ URL chu·∫©n tr∆∞·ªõc
    chapter_url = f"{base_url}chuong-{chapter_number}/"
    print(f"ƒêang l·∫•y ch∆∞∆°ng {chapter_number}: {chapter_url}")
    content = get_chapter_content(chapter_url)
    
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ c√°c URL ƒë·∫∑c bi·ªát
    if content in ["Kh√¥ng t√¨m th·∫•y n·ªôi dung", "L·ªói 404"]:
        # Th·ª≠ URL v·ªõi format chuong-XXX-YYY
        special_url = f"{base_url}chuong-{chapter_number}-{chapter_number+1}/"
        print(f"Th·ª≠ URL ƒë·∫∑c bi·ªát: {special_url}")
        content = get_chapter_content(special_url)
        
        if content in ["Kh√¥ng t√¨m th·∫•y n·ªôi dung", "L·ªói 404"]:
            # Th·ª≠ URL v·ªõi format chuong-XXX/YYY
            special_url = f"{base_url}chuong-{chapter_number}/{chapter_number+1}/"
            print(f"Th·ª≠ URL ƒë·∫∑c bi·ªát: {special_url}")
            content = get_chapter_content(special_url)
    
    return (chapter_number, content)

def crawl_story(base_url, batch_size=10, max_workers=5):
    chapters = []
    chapter_number = 1
    consecutive_empty = 0  # ƒê·∫øm s·ªë ch∆∞∆°ng tr·ªëng li√™n ti·∫øp
    max_consecutive_empty = 3  # S·ªë ch∆∞∆°ng tr·ªëng t·ªëi ƒëa li√™n ti·∫øp
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        while True:
            future_to_chapter = {
                executor.submit(fetch_chapter, chap, base_url): chap 
                for chap in range(chapter_number, chapter_number + batch_size)
            }
            batch_results = {}
            for future in concurrent.futures.as_completed(future_to_chapter):
                chap_num = future_to_chapter[future]
                try:
                    result = future.result()
                    content = result[1]
                    batch_results[chap_num] = content
                    
                    # X·ª≠ l√Ω n·ªôi dung tr∆∞·ªõc khi l∆∞u
                    if content and content not in ["Ch∆∞∆°ng tr·ªëng", "Kh√¥ng t√¨m th·∫•y n·ªôi dung", "L·ªói 503", "L·ªói 404", "L·ªói kh√¥ng x√°c ƒë·ªãnh"]:
                        content = clean_text(content)
                        batch_results[chap_num] = content
                        consecutive_empty = 0  # Reset ƒë·∫øm ch∆∞∆°ng tr·ªëng
                    else:
                        consecutive_empty += 1
                        print(f"Ch∆∞∆°ng {chap_num}: {content}")
                        
                except Exception as e:
                    print(f"L·ªói v·ªõi ch∆∞∆°ng {chap_num}: {e}")
                    batch_results[chap_num] = f"L·ªói: {str(e)}"
                    consecutive_empty += 1
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa batch
            for chap in range(chapter_number, chapter_number + batch_size):
                content = batch_results.get(chap)
                if content:
                    chapters.append((chap, content))
                
                # Ki·ªÉm tra ƒëi·ªÅu ki·ªán d·ª´ng
                if consecutive_empty >= max_consecutive_empty:
                    print(f"ƒê√£ g·∫∑p {max_consecutive_empty} ch∆∞∆°ng tr·ªëng li√™n ti·∫øp. D·ª´ng crawl.")
                    return chapters
                    
            chapter_number += batch_size
            
            # Th√™m delay gi·ªØa c√°c batch ƒë·ªÉ tr√°nh b·ªã block
            time.sleep(2)
            
    return chapters

def create_story_directory(story_name):
    """T·∫°o th∆∞ m·ª•c cho truy·ªán"""
    current_dir = Path(__file__).parent
    story_dir = current_dir / story_name
    story_dir.mkdir(exist_ok=True)
    return story_dir

def save_text_files(chapters, story_dir):
    """L∆∞u c√°c file text theo ch∆∞∆°ng"""
    current_file = 1
    current_word_count = 0
    current_chapters = []
    target_words = 18000  # S·ªë t·ª´ m·ª•c ti√™u m·ªói file
    
    def save_current_file():
        nonlocal current_file, current_word_count, current_chapters
        if not current_chapters:
            return
            
        filename = f"{story_dir.name}_part_{current_file:03d}.txt"
        filepath = story_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            for chap_num, content in current_chapters:
                f.write(f"Ch∆∞∆°ng {chap_num}\n")
                f.write("=" * 50 + "\n")
                f.write(content + "\n\n")
        
        print(f"ƒê√£ l∆∞u file text: {filename}")
        current_file += 1
        current_word_count = 0
        current_chapters = []
    
    for chap_num, content in chapters:
        # ƒê·∫øm s·ªë t·ª´ trong ch∆∞∆°ng
        word_count = len(content.split())
        
        # N·∫øu th√™m ch∆∞∆°ng n√†y v∆∞·ª£t qu√° gi·ªõi h·∫°n, l∆∞u file hi·ªán t·∫°i
        if current_word_count + word_count > target_words and current_chapters:
            save_current_file()
        
        current_chapters.append((chap_num, content))
        current_word_count += word_count
    
    # L∆∞u file cu·ªëi c√πng n·∫øu c√≤n ch∆∞∆°ng
    if current_chapters:
        save_current_file()

def create_word_doc(chapters, story_dir):
    """L∆∞u file Word trong th∆∞ m·ª•c truy·ªán"""
    try:
        doc = Document()
        for chapter_num, content in chapters:
            doc.add_heading(f"Ch∆∞∆°ng {chapter_num}", level=1)
            doc.add_paragraph(content)
            doc.add_page_break()
        
        output_path = story_dir / f"{story_name}.docx"
        doc.save(str(output_path))
        print(f"ƒê√£ l∆∞u file Word t·∫°i: {output_path}")
    except Exception as e:
        print(f"L·ªói khi l∆∞u file Word: {e}")
        raise

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        print("Vui long nhap URL truyen!")
        print("Vi du: python main.py https://truyenfull.vision/ten-truyen/")
        sys.exit(1)
        
    if not base_url.endswith('/'):
        base_url += '/'
        
    print(f"Bat dau crawl: {base_url}")
    chapters = crawl_story(base_url, batch_size=10, max_workers=5)
    
    if chapters:
        # L·∫•y t√™n truy·ªán t·ª´ URL
        story_name = base_url.split('/')[-2].replace('-', '_')
        
        # T·∫°o th∆∞ m·ª•c cho truy·ªán
        story_dir = create_story_directory(story_name)
        
        try:
            # L∆∞u file Word
            create_word_doc(chapters, story_dir)
            
            # L∆∞u c√°c file text
            save_text_files(chapters, story_dir)
            
        except Exception as e:
            print(f"Khong the tao file: {e}")
            sys.exit(1)
    else:
        print("Khong tim thay chuong nao hoac xay ra loi.")
        sys.exit(1)
